var W=Object.defineProperty;var k=(c,e,t)=>e in c?W(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t;var p=(c,e,t)=>(k(c,typeof e!="symbol"?e+"":e,t),t);import{b3 as E,b4 as i,aK as m,aL as w,aJ as F,aY as l,aM as R,b5 as N}from"./index.293c77a4.js";import{h as C}from"./contract-appuri-7234c8e6.browser.esm.81c07377.js";class I{constructor(e,t){p(this,"featureName",E.name);p(this,"setAll",w(async e=>{var f,v;const t=new F(this.contractWrapper),r=Object.keys(e);i(r.length,"you must provide at least one role to set"),i(r.every(n=>this.roles.includes(n)),"this contract does not support the given role");const o=await this.getAll(),a=[],d=r.sort(n=>n==="admin"?1:-1);for(let n=0;n<d.length;n++){const h=d[n],[y,A]=await Promise.all([Promise.all(((f=e[h])==null?void 0:f.map(s=>l(s)))||[]),Promise.all(((v=o[h])==null?void 0:v.map(s=>l(s)))||[])]),b=y.filter(s=>!A.includes(s)),u=A.filter(s=>!y.includes(s));b.length&&b.forEach(s=>{a.push(t.encode("grantRole",[m(h),s]))}),u.length&&(await Promise.all(u.map(g=>this.getRevokeRoleFunctionName(g)))).forEach((g,P)=>a.push(t.encode(g,[m(h),u[P]])))}return R.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a]})}));p(this,"grant",w(async(e,t)=>{i(this.roles.includes(e),`this contract does not support the "${e}" role`);const r=await l(t);return R.fromContractWrapper({contractWrapper:this.contractWrapper,method:"grantRole",args:[m(e),r]})}));p(this,"revoke",w(async(e,t)=>{i(this.roles.includes(e),`this contract does not support the "${e}" role`);const r=await l(t),o=await this.getRevokeRoleFunctionName(r);return R.fromContractWrapper({contractWrapper:this.contractWrapper,method:o,args:[m(e),r]})}));this.contractWrapper=e,this.roles=t}async getAll(){i(this.roles.length,"this contract has no support for roles");const e={},t=Object.entries(this.roles);return(await Promise.all(t.map(r=>{let[,o]=r;return this.get(o)}))).forEach((r,o)=>e[t[o][1]]=r),e}async get(e){i(this.roles.includes(e),`this contract does not support the "${e}" role`);const t=this.contractWrapper;if(C("getRoleMemberCount",t)&&C("getRoleMember",t)){const r=m(e),o=(await t.read("getRoleMemberCount",[r])).toNumber();return await Promise.all(Array.from(Array(o).keys()).map(a=>t.read("getRoleMember",[r,a])))}throw new Error("Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.")}async verify(e,t){await Promise.all(e.map(async r=>{const[o,a]=await Promise.all([this.get(r),l(t)]);if(!o.map(d=>d.toLowerCase()).includes(a.toLowerCase()))throw new N(a,r)}))}async getRevokeRoleFunctionName(e){const[t,r]=await Promise.all([l(e),this.contractWrapper.getSignerAddress()]);return r.toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}}export{I as C};
