var u=Object.defineProperty;var d=(s,e,t)=>e in s?u(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var o=(s,e,t)=>(d(s,typeof e!="symbol"?e+"":e,t),t);import{a5 as g,aF as C,aG as f,aH as w,aI as y,aJ as W,aK as T,ah as A,aL as i,aM as R}from"./index.293c77a4.js";import{C as E,a as k,b as S,G as b}from"./contract-appuri-7234c8e6.browser.esm.81c07377.js";import{C as v}from"./contract-interceptor-6f8989ff.browser.esm.79a9b943.js";import{C as I,a as O}from"./contract-owner-ed67b71f.browser.esm.475c8fd6.js";import{C as F}from"./contract-platform-fee-f9de4858.browser.esm.fb41d8c2.js";import{C as N}from"./contract-roles-381cbf9d.browser.esm.8aab8fda.js";import{C as P}from"./contract-sales-b8c598f7.browser.esm.db18623d.js";import{D as B}from"./erc-1155-29bd47ef.browser.esm.326e6850.js";import{S as _}from"./erc-1155-standard-a5c27e22.browser.esm.839ff2ae.js";import{P as G}from"./thirdweb-checkout-bf667a11.browser.esm.c41669c1.js";import"./setErc20Allowance-87350278.browser.esm.ea5614f4.js";import"./QueryParams-9cdbddd0.browser.esm.62aa5713.js";import"./index.00d0239b.js";import"./assertEnabled-e3719c36.browser.esm.4d41d034.js";class H{constructor(e){this.events=e}async getAllClaimerAddresses(e){const t=(await this.events.getEvents("TokensClaimed")).filter(r=>r.data&&g.isBigNumber(r.data.tokenId)?r.data.tokenId.eq(e):!1);return Array.from(new Set(t.filter(r=>{var a;return typeof((a=r.data)==null?void 0:a.claimer)=="string"}).map(r=>r.data.claimer)))}}const h=class extends _{constructor(t,r,a){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,m=arguments.length>5?arguments[5]:void 0,l=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new f(t,r,c,n,a);super(l,a,m);o(this,"createBatch",i(async(t,r)=>this.erc1155.lazyMint.prepare(t,r)));o(this,"claimTo",i((()=>{var t=this;return async function(r,a,n){let c=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return t.erc1155.claimTo.prepare(r,a,n,{checkERC20Allowance:c})}})()));o(this,"claim",i((()=>{var t=this;return async function(r,a){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const c=await t.contractWrapper.getSignerAddress();return t.claimTo.prepare(c,r,a,n)}})()));o(this,"burnTokens",i(async(t,r)=>this.erc1155.burn.prepare(t,r)));this.abi=w.parse(c),this.metadata=new E(this.contractWrapper,y,this.storage),this.app=new k(this.contractWrapper,this.metadata,this.storage),this.roles=new N(this.contractWrapper,h.contractRoles),this.royalties=new I(this.contractWrapper,this.metadata),this.sales=new P(this.contractWrapper),this.claimConditions=new B(this.contractWrapper,this.metadata,this.storage),this.events=new S(this.contractWrapper),this.history=new H(this.events),this.encoder=new W(this.contractWrapper),this.estimator=new b(this.contractWrapper),this.platformFees=new F(this.contractWrapper),this.interceptor=new v(this.contractWrapper),this.checkout=new G(this.contractWrapper),this.owner=new O(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t,r){return this.erc1155.getOwned(t,r)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[T("transfer"),A])}async getClaimTransaction(t,r,a){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return this.erc1155.getClaimTransaction(t,r,a,{checkERC20Allowance:n})}async prepare(t,r,a){return R.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}};let p=h;o(p,"contractRoles",C);export{p as EditionDrop};
